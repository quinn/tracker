//! SeaORM Entity. Generated by sea-orm-codegen 0.10.0

use schemars::{gen::SchemaGenerator, schema::*, JsonSchema};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

struct MyUuid(Uuid);

impl JsonSchema for MyUuid {
    fn schema_name() -> String {
        "Uuid".to_string()
    }

    fn json_schema(_: &mut SchemaGenerator) -> Schema {
        SchemaObject {
            instance_type: Some(InstanceType::String.into()),
            format: Some("uuid".to_string()),
            ..Default::default()
        }
        .into()
    }
}

impl Into<sea_orm::Value> for MyUuid {
    fn into(self) -> T {
        todo!()
    }
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, JsonSchema)]
#[sea_orm(table_name = "task")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: MyUuid,
    pub summary: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
